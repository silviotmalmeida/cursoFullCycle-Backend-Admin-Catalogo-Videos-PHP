- instalar o php:
    sudo add-apt-repository ppa:ondrej/php;
    sudo apt update;
    sudo apt install php8.1;

- comandos do composer
    para iniciar um projeto: composer init
    para gerar o arquivo de autoload: composer dump-autoload
    para atualizar todas as dependências: composer update
    para instalar o phpunit: composer require --dev phpunit/phpunit ^9.5
    para instalar o mockery: composer require --dev mockery/mockery
    para instalar o ramsey-uuid: composer require ramsey/uuid
    para instalar o guard do keycloak: composer require robsontenorio/laravel-keycloak-guard

- comandos do laravel
    para criar uma key: php artisan key:generate
    para criar uma model com a migration e factory: php artisan make:model <nome-da-model> -mf
    para criar um teste unitário: php artisan make:test <namespace (App\\Models\\CategoryUnitTest)> --unit
    para criar um teste de feature: php artisan make:test <namespace (App\\Repositories\\Eloquent\\CategoryEloquentRepositoryFeatureTest)>
    para criar um controller: php artisan make:controller <namespace (Api\\CategoryController)>
    para criar um api resource: php artisan make:resource <namespace (CategoryResource)>
    para criar um api request: php artisan make:request <namespace (StoreCategoryRequest)>
    para listar as rotas cadastradas: php artisan route:list
    para criar uma migration: php artisan make:migration <nome-da-migration>
    para criar um provider: php artisan make:provider <nome-do-provider>
    para criar um listener: php artisan make:listener <nome-do-listener>
    para testar uma factory com o tinker: php artisan tinker <path-da-model(ex. \App\Models\Video)>::factory->count(10)->create();
    para publicar um recurso externo: php artisan vendor:publish --provider=<nome-do-recurso (ex. "KeycloakGuard\KeycloakGuardServiceProvider")>

- ordem de implementação das classes
    - core
      - entidades;
      - repositoryInterface da entidade;
      - usecases, inputDTO e outputDTO;

    - infra
      - models, migrations e factories;
      - controller, requests e resources;
      - repositories concretos;
      - bind do repositoryInterface(AppServiceProvider), rotas(app/routes/api)

    


